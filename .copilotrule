编写项目代码时，必须遵循下面的最佳实践：
1. 项目结构和模块化
使用 Django 应用：将不同功能模块分成独立的 Django 应用（如 mainapp），以促进代码的可重用性和关注点分离。
目录结构：保持清晰的目录结构，便于维护和扩展。
2. 数据库和 ORM
Django ORM：使用 Django 的 ORM 进行数据库交互，避免使用原生 SQL 查询，除非性能要求特别高。
模型设计：设计清晰的模型，使用外键和关系来表示实体之间的关系。
3. 视图和 URL 设计
类视图和函数视图：根据复杂度选择使用类视图（CBV）或函数视图（FBV）。注册和登录功能可以使用函数视图，复杂的查看和管理功能可以使用类视图。
URL 设计：使用 Django 的 URL 分发器定义清晰和 RESTful 的 URL 模式。
4. 用户管理和认证
内置用户模型：使用 Django 的内置用户模型和认证框架来管理用户。
自定义用户模型：根据需要扩展用户模型，添加角色和关联公司、项目等字段。
5. 表单处理和验证
Django 表单：使用 Django 的表单和模型表单类来处理和验证表单数据。
数据验证：在模型和表单中实现数据验证，确保数据的完整性和正确性。
6. 错误处理和验证
视图级错误处理：在视图中实现错误处理，使用 Django 的内置错误处理机制。
自定义错误页面：定制 404 和 500 错误页面，提供更好的用户体验。
7. 安全性
CSRF 保护：确保所有表单和 API 请求都启用了 CSRF 保护。
输入验证：防止 SQL 注入和 XSS 攻击，确保所有输入数据都经过验证和清理。
8. 性能优化
查询优化：使用 select_related 和 prefetch_related 优化查询性能。
缓存：使用 Django 的缓存框架（如 Redis）来减少数据库负载。
9. 依赖管理
依赖管理：使用 requirements.txt 或 Pipfile 管理项目依赖，确保环境的一致性。
10. 中间件
中间件使用：使用 Django 的中间件处理跨领域关注点，如认证、日志记录和安全。
11. 静态文件管理
静态文件：使用 Django 的静态文件管理系统（如 WhiteNoise 或 CDN 集成）优化静态文件的处理。
12. 代码风格和规范
PEP 8：遵循 PEP 8 代码风格指南，保持代码的可读性和一致性。
命名规范：使用描述性变量和函数名，遵循命名约定（如小写加下划线）。

13. 调试和日志规范
调试方法：
- 使用打印语句：在关键代码节点添加 print 或 console.log 语句进行调试。
- 日志装饰器：对重要函数使用日志装饰器，自动记录函数执行过程。
- 分层调试：按照数据流向依次添加日志点（如：数据库查询 -> 业务逻辑 -> API响应）。

调试最佳实践：
- 使用有意义的日志前缀，便于分类和过滤。
- 在关键节点记录输入参数和返回值。
- 记录时间戳和执行时间。
- 使用不同日志级别（DEBUG, INFO, ERROR）。
- 在生产环境中可以方便地关闭调试输出。

示例日志点：
- 函数入口和出口
- 数据库操作前后
- API 请求和响应
- 条件判断的分支
- 循环的迭代过程
- 异常捕获处理

14. AI 辅助开发规范
对话原则：
- 在同一个问题的对话中，如果发现 AI 开始重复类似的建议：
  1. 立即指出"这个建议和之前的类似"
  2. 要求探索完全不同的解决思路
  3. 重新审视问题本质

问题诊断流程：
1. 当前建议是否重复？
   - 是 -> 立即转换思路，尝试不同技术方案
   - 否 -> 继续当前方案
2. 多次尝试仍未解决？
   - 是 -> 停下来重新审视问题本质
   - 否 -> 继续调试和优化

避免陷入循环：
- 在同一对话中跟踪 AI 的建议方向
- 及时识别重复的解决思路
- 主动要求探索其他技术方案
- 必要时考虑更基础的架构调整


15. 通俗易懂地解释
当用户就你提供的解决方案中的某个部分提出问题时，包括但不限于terminology，方案等，你需要：用通俗易懂的语言，尝试给一个只有基础Python和js知识的人讲解清楚。
# 开发指南（Guideline）

## 1. 计划和设计

- 初步设计：先设计好整体的功能模块和数据库结构。
- 核心功能：确定核心功能，优先实现。

## 2. 逐步递进开发

- 小步快跑：每次只实现一个小功能，确保每个功能都能独立运行和测试。
- 后端开发：实现后端 API。
- 前端开发：实现前端页面或组件，调用后端 API。
- 快速反馈：在前端页面中测试新功能，确保功能正常。

## 3. 开发步骤

1. 后端开发
   - 创建或更新模型（models）。
   - 创建或更新序列化器（serializers）。
   - 创建或更新视图（views）。
   - 更新路由（urls）。
   - 生成并应用数据库迁移。

2. 前端开发
   - 创建或更新组件（components）。
   - 调用后端 API，获取数据。
   - 显示数据，确保功能正常。

3. 测试和反馈
   - 在浏览器中测试前端页面。
   - 确保功能正常，修复任何问题。

## 4. 示例流程

示例：实现获取在岗员工名单的功能

1. 后端开发
   - 创建 Employee 模型。
   - 创建 EmployeeSerializer 序列化器。
   - 创建 EmployeeListView 视图。
   - 更新 urls.py，添加路由。
   - 生成并应用数据库迁移。

2. 前端开发
   - 创建 PersonnelList 组件。
   - 在组件中调用 /api/employees/ API。
   - 显示员工名单。

3. 测试和反馈
   - 在浏览器中访问相应页面，测试员工名单显示功能。
   - 确保功能正常，修复任何问题。

## 5. 迭代开发

- 重复步骤：每完成一个小功能，重复上述步骤，逐步实现整个项目。
- 持续反馈：每次实现新功能后，立即进行前端展示和测试，获得快速反馈。